using System;
using System.IO;
using System.Linq;
using System.Globalization;
using System.Collections.Generic;

namespace Timelapse_API
{
    public partial class PP3
    {
        private void Write326(StreamWriter writer)
        {
            Values["Exposure.Compensation"].Value = NewCompensation;

            writer.WriteLine("[Version]");
            Write(writer, "Version", "AppVersion");
            Write(writer, "Version", "Version"); // file version
            writer.WriteLine();
            writer.WriteLine("[General]");
            Write(writer, "General", "Rank");
            Write(writer, "General", "ColorLabel");
            Write(writer, "General", "InTrash");
            writer.WriteLine();
            writer.WriteLine("[Exposure]");
            Write(writer, "Exposure", "Auto");
            Write(writer, "Exposure", "Clip");
            Write(writer, "Exposure", "Compensation"); // value replaced
            Write(writer, "Exposure", "Brightness");
            Write(writer, "Exposure", "Contrast");
            Write(writer, "Exposure", "Saturation");
            Write(writer, "Exposure", "Black");
            Write(writer, "Exposure", "HighlightCompr");
            Write(writer, "Exposure", "HighlightComprThreshold");
            Write(writer, "Exposure", "ShadowCompr");
            Write(writer, "Exposure", "CurveMode");
            Write(writer, "Exposure", "CurveMode2");
            Write(writer, "Exposure", "Curve");
            Write(writer, "Exposure", "Curve2");
            writer.WriteLine();
            writer.WriteLine("[HLRecovery]");
            Write(writer, "HLRecovery", "Enabled");
            Write(writer, "HLRecovery", "Method");
            writer.WriteLine();
            writer.WriteLine("[Channel Mixer]");
            Write(writer, "ChannelMixer", "Red");
            Write(writer, "ChannelMixer", "Green");
            Write(writer, "ChannelMixer", "Blue");
            writer.WriteLine();
            writer.WriteLine("[Black & White]");
            Write(writer, "BlackAndWhite", "Enabled");
            Write(writer, "BlackAndWhite", "Method");
            Write(writer, "BlackAndWhite", "Auto");
            Write(writer, "BlackAndWhite", "ComplementaryColors");
            Write(writer, "BlackAndWhite", "Setting");
            Write(writer, "BlackAndWhite", "Filter");
            Write(writer, "BlackAndWhite", "MixerRed");
            Write(writer, "BlackAndWhite", "MixerOrange");
            Write(writer, "BlackAndWhite", "MixerYellow");
            Write(writer, "BlackAndWhite", "MixerGreen");
            Write(writer, "BlackAndWhite", "MixerCyan");
            Write(writer, "BlackAndWhite", "MixerBlue");
            Write(writer, "BlackAndWhite", "MixerMagenta");
            Write(writer, "BlackAndWhite", "MixerPurple");
            Write(writer, "BlackAndWhite", "GammaRed");
            Write(writer, "BlackAndWhite", "GammaGreen");
            Write(writer, "BlackAndWhite", "GammaBlue");
            Write(writer, "BlackAndWhite", "Algorithm");
            Write(writer, "BlackAndWhite", "LuminanceCurve");
            Write(writer, "BlackAndWhite", "BeforeCurveMode");
            Write(writer, "BlackAndWhite", "AfterCurveMode");
            Write(writer, "BlackAndWhite", "BeforeCurve");
            Write(writer, "BlackAndWhite", "AfterCurve");
            writer.WriteLine();
            writer.WriteLine("[Luminance Curve]");
            Write(writer, "LuminanceCurve", "Brightness");
            Write(writer, "LuminanceCurve", "Contrast");
            Write(writer, "LuminanceCurve", "Chromaticity");
            Write(writer, "LuminanceCurve", "AvoidColorShift");
            Write(writer, "LuminanceCurve", "RedAndSkinTonesProtection");
            Write(writer, "LuminanceCurve", "LCredsk");
            Write(writer, "LuminanceCurve", "LCurve");
            Write(writer, "LuminanceCurve", "aCurve");
            Write(writer, "LuminanceCurve", "bCurve");
            Write(writer, "LuminanceCurve", "ccCurve");
            Write(writer, "LuminanceCurve", "chCurve");
            Write(writer, "LuminanceCurve", "lhCurve");
            Write(writer, "LuminanceCurve", "hhCurve");
            Write(writer, "LuminanceCurve", "LcCurve");
            Write(writer, "LuminanceCurve", "ClCurve");
            writer.WriteLine();
            writer.WriteLine("[Sharpening]");
            Write(writer, "Sharpening", "Enabled");
            Write(writer, "Sharpening", "Method");
            Write(writer, "Sharpening", "Radius");
            Write(writer, "Sharpening", "Amount");
            Write(writer, "Sharpening", "Threshold");
            Write(writer, "Sharpening", "OnlyEdges");
            Write(writer, "Sharpening", "EdgedetectionRadius");
            Write(writer, "Sharpening", "EdgeTolerance");
            Write(writer, "Sharpening", "HalocontrolEnabled");
            Write(writer, "Sharpening", "HalocontrolAmount");
            Write(writer, "Sharpening", "DeconvRadius");
            Write(writer, "Sharpening", "DeconvAmount");
            Write(writer, "Sharpening", "DeconvDamping");
            Write(writer, "Sharpening", "DeconvIterations");
            writer.WriteLine();
            writer.WriteLine("[Vibrance]");
            Write(writer, "Vibrance", "Enabled");
            Write(writer, "Vibrance", "Pastels");
            Write(writer, "Vibrance", "Saturated");
            Write(writer, "Vibrance", "PSThreshold");
            Write(writer, "Vibrance", "ProtectSkins");
            Write(writer, "Vibrance", "AvoidColorShift");
            Write(writer, "Vibrance", "PastSatTog");
            Write(writer, "Vibrance", "SkinTonesCurve");
            writer.WriteLine();
            writer.WriteLine("[SharpenEdge]");
            Write(writer, "SharpenEdge", "Enabled");
            Write(writer, "SharpenEdge", "Passes");
            Write(writer, "SharpenEdge", "Strength");
            Write(writer, "SharpenEdge", "ThreeChannels");
            writer.WriteLine();
            writer.WriteLine("[SharpenMicro]");
            Write(writer, "SharpenMicro", "Enabled");
            Write(writer, "SharpenMicro", "Matrix");
            Write(writer, "SharpenMicro", "Strength");
            Write(writer, "SharpenMicro", "Uniformity");
            writer.WriteLine();
            writer.WriteLine("[White Balance]");
            Write(writer, "WhiteBalance", "Setting");
            Write(writer, "WhiteBalance", "Temperature");
            Write(writer, "WhiteBalance", "Green");
            Write(writer, "WhiteBalance", "Equal");
            writer.WriteLine();
            writer.WriteLine("[Color appearance]");
            Write(writer, "Colorappearance", "Enabled");
            Write(writer, "Colorappearance", "Degree");
            Write(writer, "Colorappearance", "AutoDegree");
            Write(writer, "Colorappearance", "Surround");
            Write(writer, "Colorappearance", "AdaptLum");
            Write(writer, "Colorappearance", "Badpixsl");
            Write(writer, "Colorappearance", "Model");
            Write(writer, "Colorappearance", "Algorithm");
            Write(writer, "Colorappearance", "J-Light");
            Write(writer, "Colorappearance", "Q-Bright");
            Write(writer, "Colorappearance", "C-Chroma");
            Write(writer, "Colorappearance", "S-Chroma");
            Write(writer, "Colorappearance", "M-Chroma");
            Write(writer, "Colorappearance", "J-Contrast");
            Write(writer, "Colorappearance", "Q-Contrast");
            Write(writer, "Colorappearance", "H-Hue");
            Write(writer, "Colorappearance", "RSTProtection");
            Write(writer, "Colorappearance", "AdaptScene");
            Write(writer, "Colorappearance", "AutoAdapscen");
            Write(writer, "Colorappearance", "SurrSource");
            Write(writer, "Colorappearance", "Gamut");
            Write(writer, "Colorappearance", "Datacie");
            Write(writer, "Colorappearance", "Tonecie");
            Write(writer, "Colorappearance", "CurveMode");
            Write(writer, "Colorappearance", "CurveMode2");
            Write(writer, "Colorappearance", "CurveMode3");
            Write(writer, "Colorappearance", "Curve");
            Write(writer, "Colorappearance", "Curve2");
            Write(writer, "Colorappearance", "Curve3");
            writer.WriteLine();
            writer.WriteLine("[Impulse Denoising]");
            Write(writer, "ImpulseDenoising", "Enabled");
            Write(writer, "ImpulseDenoising", "Threshold");
            writer.WriteLine();
            writer.WriteLine("[Defringing]");
            Write(writer, "Defringing", "Enabled");
            Write(writer, "Defringing", "Radius");
            Write(writer, "Defringing", "Threshold");
            Write(writer, "Defringing", "HueCurve");
            writer.WriteLine();
            writer.WriteLine("[Directional Pyramid Denoising]");
            Write(writer, "DirectionalPyramidDenoising", "Enabled");
            Write(writer, "DirectionalPyramidDenoising", "Enhance");
            Write(writer, "DirectionalPyramidDenoising", "Median");
            Write(writer, "DirectionalPyramidDenoising", "Auto");
            Write(writer, "DirectionalPyramidDenoising", "Luma");
            Write(writer, "DirectionalPyramidDenoising", "Ldetail");
            Write(writer, "DirectionalPyramidDenoising", "Chroma");
            Write(writer, "DirectionalPyramidDenoising", "Method");
            Write(writer, "DirectionalPyramidDenoising", "LMethod");
            Write(writer, "DirectionalPyramidDenoising", "CMethod");
            Write(writer, "DirectionalPyramidDenoising", "C2Method");
            Write(writer, "DirectionalPyramidDenoising", "SMethod");
            Write(writer, "DirectionalPyramidDenoising", "MedMethod");
            Write(writer, "DirectionalPyramidDenoising", "RGBMethod");
            Write(writer, "DirectionalPyramidDenoising", "MethodMed");
            Write(writer, "DirectionalPyramidDenoising", "Redchro");
            Write(writer, "DirectionalPyramidDenoising", "Bluechro");
            Write(writer, "DirectionalPyramidDenoising", "Gamma");
            Write(writer, "DirectionalPyramidDenoising", "Passes");
            Write(writer, "DirectionalPyramidDenoising", "LCurve");
            Write(writer, "DirectionalPyramidDenoising", "CCurve");
            writer.WriteLine();
            writer.WriteLine("[EPD]");
            Write(writer, "EPD", "Enabled");
            Write(writer, "EPD", "Strength");
            Write(writer, "EPD", "Gamma");
            Write(writer, "EPD", "EdgeStopping");
            Write(writer, "EPD", "Scale");
            Write(writer, "EPD", "ReweightingIterates");
            writer.WriteLine();
            writer.WriteLine("[Shadows & Highlights]");
            Write(writer, "ShadowsAndHighlights", "Enabled");
            Write(writer, "ShadowsAndHighlights", "HighQuality");
            Write(writer, "ShadowsAndHighlights", "Highlights");
            Write(writer, "ShadowsAndHighlights", "HighlightTonalWidth");
            Write(writer, "ShadowsAndHighlights", "Shadows");
            Write(writer, "ShadowsAndHighlights", "ShadowTonalWidth");
            Write(writer, "ShadowsAndHighlights", "LocalContrast");
            Write(writer, "ShadowsAndHighlights", "Radius");
            writer.WriteLine();
            writer.WriteLine("[Crop]");
            Write(writer, "Crop", "Enabled");
            Write(writer, "Crop", "X");
            Write(writer, "Crop", "Y");
            Write(writer, "Crop", "W");
            Write(writer, "Crop", "H");
            Write(writer, "Crop", "FixedRatio");
            Write(writer, "Crop", "Ratio");
            Write(writer, "Crop", "Orientation");
            Write(writer, "Crop", "Guide");
            writer.WriteLine();
            writer.WriteLine("[Coarse Transformation]");
            Write(writer, "CoarseTransformation", "Rotate");
            Write(writer, "CoarseTransformation", "HorizontalFlip");
            Write(writer, "CoarseTransformation", "VerticalFlip");
            writer.WriteLine();
            writer.WriteLine("[Common Properties for Transformations]");
            Write(writer, "CommonPropertiesforTransformations", "AutoFill");
            writer.WriteLine();
            writer.WriteLine("[Rotation]");
            Write(writer, "Rotation", "Degree");
            writer.WriteLine();
            writer.WriteLine("[Distortion]");
            Write(writer, "Distortion", "Amount");
            writer.WriteLine();
            writer.WriteLine("[LensProfile]");
            Write(writer, "LensProfile", "LCPFile");
            Write(writer, "LensProfile", "UseDistortion");
            Write(writer, "LensProfile", "UseVignette");
            Write(writer, "LensProfile", "UseCA");
            writer.WriteLine();
            writer.WriteLine("[Perspective]");
            Write(writer, "Perspective", "Horizontal");
            Write(writer, "Perspective", "Vertical");
            writer.WriteLine();
            writer.WriteLine("[Gradient]");
            Write(writer, "Gradient", "Enabled");
            Write(writer, "Gradient", "Degree");
            Write(writer, "Gradient", "Feather");
            Write(writer, "Gradient", "Strength");
            Write(writer, "Gradient", "CenterX");
            Write(writer, "Gradient", "CenterY");
            writer.WriteLine();
            writer.WriteLine("[PCVignette]");
            Write(writer, "PCVignette", "Enabled");
            Write(writer, "PCVignette", "Strength");
            Write(writer, "PCVignette", "Feather");
            Write(writer, "PCVignette", "Roundness");
            writer.WriteLine();
            writer.WriteLine("[CACorrection]");
            Write(writer, "CACorrection", "Red");
            Write(writer, "CACorrection", "Blue");
            writer.WriteLine();
            writer.WriteLine("[Vignetting Correction]");
            Write(writer, "VignettingCorrection", "Amount");
            Write(writer, "VignettingCorrection", "Radius");
            Write(writer, "VignettingCorrection", "Strength");
            Write(writer, "VignettingCorrection", "CenterX");
            Write(writer, "VignettingCorrection", "CenterY");
            writer.WriteLine();
            writer.WriteLine("[Resize]");
            Write(writer, "Resize", "Enabled");
            Write(writer, "Resize", "Scale");
            Write(writer, "Resize", "AppliesTo");
            Write(writer, "Resize", "Method");
            Write(writer, "Resize", "DataSpecified");
            Write(writer, "Resize", "Width");
            Write(writer, "Resize", "Height");
            writer.WriteLine();
            writer.WriteLine("[PostResizeSharpening]");
            Write(writer, "PostResizeSharpening", "Enabled");
            Write(writer, "PostResizeSharpening", "Method");
            Write(writer, "PostResizeSharpening", "Radius");
            Write(writer, "PostResizeSharpening", "Amount");
            Write(writer, "PostResizeSharpening", "Threshold");
            Write(writer, "PostResizeSharpening", "OnlyEdges");
            Write(writer, "PostResizeSharpening", "EdgedetectionRadius");
            Write(writer, "PostResizeSharpening", "EdgeTolerance");
            Write(writer, "PostResizeSharpening", "HalocontrolEnabled");
            Write(writer, "PostResizeSharpening", "HalocontrolAmount");
            Write(writer, "PostResizeSharpening", "DeconvRadius");
            Write(writer, "PostResizeSharpening", "DeconvAmount");
            Write(writer, "PostResizeSharpening", "DeconvDamping");
            Write(writer, "PostResizeSharpening", "DeconvIterations");
            writer.WriteLine();
            writer.WriteLine("[Color Management]");
            Write(writer, "ColorManagement", "InputProfile");
            Write(writer, "ColorManagement", "ToneCurve");
            Write(writer, "ColorManagement", "ApplyLookTable");
            Write(writer, "ColorManagement", "ApplyBaselineExposureOffset");
            Write(writer, "ColorManagement", "ApplyHueSatMap");
            Write(writer, "ColorManagement", "BlendCMSMatrix");
            Write(writer, "ColorManagement", "DCPIlluminant");
            Write(writer, "ColorManagement", "WorkingProfile");
            Write(writer, "ColorManagement", "OutputProfile");
            Write(writer, "ColorManagement", "Gammafree");
            Write(writer, "ColorManagement", "Freegamma");
            Write(writer, "ColorManagement", "GammaValue");
            Write(writer, "ColorManagement", "GammaSlope");
            writer.WriteLine();
            writer.WriteLine("[Wavelet]");
            Write(writer, "Wavelet", "Enabled");;
            Write(writer, "Wavelet", "Strength");;
            Write(writer, "Wavelet", "Balance");;
            Write(writer, "Wavelet", "Iter");;
            Write(writer, "Wavelet", "MaxLev");;
            Write(writer, "Wavelet", "TilesMethod");;
            Write(writer, "Wavelet", "DaubMethod");;
            Write(writer, "Wavelet", "ChoiceLevMethod");;
            Write(writer, "Wavelet", "BackMethod");;
            Write(writer, "Wavelet", "LevMethod");;
            Write(writer, "Wavelet", "DirMethod");;
            Write(writer, "Wavelet", "CBgreenhigh");;
            Write(writer, "Wavelet", "CBgreenmed");;
            Write(writer, "Wavelet", "CBgreenlow");;
            Write(writer, "Wavelet", "CBbluehigh");;
            Write(writer, "Wavelet", "CBbluemed");;
            Write(writer, "Wavelet", "CBbluelow");;
            Write(writer, "Wavelet", "Expcontrast");;
            Write(writer, "Wavelet", "Expchroma");;
            Write(writer, "Wavelet", "Expedge");;
            Write(writer, "Wavelet", "Expresid");;
            Write(writer, "Wavelet", "Expfinal");;
            Write(writer, "Wavelet", "Exptoning");;
            Write(writer, "Wavelet", "Expnoise");;
            Write(writer, "Wavelet", "Contrast1");;
            Write(writer, "Wavelet", "Contrast2");;
            Write(writer, "Wavelet", "Contrast3");;
            Write(writer, "Wavelet", "Contrast4");;
            Write(writer, "Wavelet", "Contrast5");;
            Write(writer, "Wavelet", "Contrast6");;
            Write(writer, "Wavelet", "Contrast7");;
            Write(writer, "Wavelet", "Contrast8");;
            Write(writer, "Wavelet", "Contrast9");;
            Write(writer, "Wavelet", "Chroma1");;
            Write(writer, "Wavelet", "Chroma2");;
            Write(writer, "Wavelet", "Chroma3");;
            Write(writer, "Wavelet", "Chroma4");;
            Write(writer, "Wavelet", "Chroma5");;
            Write(writer, "Wavelet", "Chroma6");;
            Write(writer, "Wavelet", "Chroma7");;
            Write(writer, "Wavelet", "Chroma8");;
            Write(writer, "Wavelet", "Chroma9");;
            Write(writer, "Wavelet", "ContExtra");;
            Write(writer, "Wavelet", "HSMethod");;
            Write(writer, "Wavelet", "HLRange");;
            Write(writer, "Wavelet", "SHRange");;
            Write(writer, "Wavelet", "Edgcont");;
            Write(writer, "Wavelet", "Level0noise");;
            Write(writer, "Wavelet", "Level1noise");;
            Write(writer, "Wavelet", "Level2noise");;
            Write(writer, "Wavelet", "Level3noise");;
            Write(writer, "Wavelet", "ThresholdHighlight");;
            Write(writer, "Wavelet", "ThresholdShadow");;
            Write(writer, "Wavelet", "Edgedetect");;
            Write(writer, "Wavelet", "Edgedetectthr");;
            Write(writer, "Wavelet", "EdgedetectthrHi");;
            Write(writer, "Wavelet", "Edgesensi");;
            Write(writer, "Wavelet", "Edgeampli");;
            Write(writer, "Wavelet", "ThresholdChroma");;
            Write(writer, "Wavelet", "CHromaMethod");;
            Write(writer, "Wavelet", "Medgreinf");;
            Write(writer, "Wavelet", "CHSLromaMethod");;
            Write(writer, "Wavelet", "EDMethod");;
            Write(writer, "Wavelet", "NPMethod");;
            Write(writer, "Wavelet", "BAMethod");;
            Write(writer, "Wavelet", "TMMethod");;
            Write(writer, "Wavelet", "ChromaLink");;
            Write(writer, "Wavelet", "ContrastCurve");;
            Write(writer, "Wavelet", "Pastlev");;
            Write(writer, "Wavelet", "Satlev");;
            Write(writer, "Wavelet", "OpacityCurveRG");;
            Write(writer, "Wavelet", "OpacityCurveBY");;
            Write(writer, "Wavelet", "OpacityCurveW");;
            Write(writer, "Wavelet", "OpacityCurveWL");;
            Write(writer, "Wavelet", "HHcurve");;
            Write(writer, "Wavelet", "CHcurve");;
            Write(writer, "Wavelet", "WavclCurve");;
            Write(writer, "Wavelet", "Median");;
            Write(writer, "Wavelet", "Medianlev");;
            Write(writer, "Wavelet", "Linkedg");;
            Write(writer, "Wavelet", "CBenab");;
            Write(writer, "Wavelet", "Lipst");;
            Write(writer, "Wavelet", "Skinprotect");;
            Write(writer, "Wavelet", "Hueskin");;
            Write(writer, "Wavelet", "Edgrad");;
            Write(writer, "Wavelet", "Edgval");;
            Write(writer, "Wavelet", "ThrEdg");;
            Write(writer, "Wavelet", "AvoidColorShift");;
            Write(writer, "Wavelet", "TMr");;
            Write(writer, "Wavelet", "ResidualcontShadow");;
            Write(writer, "Wavelet", "ResidualcontHighlight");;
            Write(writer, "Wavelet", "ThresholdResidShadow");;
            Write(writer, "Wavelet", "ThresholdResidHighLight");;
            Write(writer, "Wavelet", "Residualchroma");;
            Write(writer, "Wavelet", "ResidualTM");;
            Write(writer, "Wavelet", "Residualgamma");;
            Write(writer, "Wavelet", "HueRangeResidual");;
            Write(writer, "Wavelet", "HueRange");;
            Write(writer, "Wavelet", "Contrast");;
            writer.WriteLine();
            writer.WriteLine("[Directional Pyramid Equalizer]");
            Write(writer, "DirectionalPyramidEqualizer", "Enabled");
            Write(writer, "DirectionalPyramidEqualizer", "Gamutlab");
            Write(writer, "DirectionalPyramidEqualizer", "Mult0");
            Write(writer, "DirectionalPyramidEqualizer", "Mult1");
            Write(writer, "DirectionalPyramidEqualizer", "Mult2");
            Write(writer, "DirectionalPyramidEqualizer", "Mult3");
            Write(writer, "DirectionalPyramidEqualizer", "Mult4");
            Write(writer, "DirectionalPyramidEqualizer", "Mult5");
            Write(writer, "DirectionalPyramidEqualizer", "Threshold");
            Write(writer, "DirectionalPyramidEqualizer", "Skinprotect");
            Write(writer, "DirectionalPyramidEqualizer", "Hueskin");
            writer.WriteLine();
            writer.WriteLine("[HSV Equalizer]");
            Write(writer, "HSVEqualizer", "HCurve");
            Write(writer, "HSVEqualizer", "SCurve");
            Write(writer, "HSVEqualizer", "VCurve");
            writer.WriteLine();
            writer.WriteLine("[Film Simulation]");
            Write(writer, "FilmSimulation", "Enabled");
            Write(writer, "FilmSimulation", "ClutFilename");
            Write(writer, "FilmSimulation", "Strength");
            writer.WriteLine();
            writer.WriteLine("[RGB Curves]");
            Write(writer, "RGBCurves", "LumaMode");
            Write(writer, "RGBCurves", "rCurve");
            Write(writer, "RGBCurves", "gCurve");
            Write(writer, "RGBCurves", "bCurve");
            writer.WriteLine();
            writer.WriteLine("[ColorToning]");
            Write(writer, "ColorToning", "Enabled");
            Write(writer, "ColorToning", "Method");
            Write(writer, "ColorToning", "Lumamode");
            Write(writer, "ColorToning", "Twocolor");
            Write(writer, "ColorToning", "Redlow");
            Write(writer, "ColorToning", "Greenlow");
            Write(writer, "ColorToning", "Bluelow");
            Write(writer, "ColorToning", "Satlow");
            Write(writer, "ColorToning", "Balance");
            Write(writer, "ColorToning", "Sathigh");
            Write(writer, "ColorToning", "Redmed");
            Write(writer, "ColorToning", "Greenmed");
            Write(writer, "ColorToning", "Bluemed");
            Write(writer, "ColorToning", "Redhigh");
            Write(writer, "ColorToning", "Greenhigh");
            Write(writer, "ColorToning", "Bluehigh");
            Write(writer, "ColorToning", "Autosat");
            Write(writer, "ColorToning", "OpacityCurve");
            Write(writer, "ColorToning", "ColorCurve");
            Write(writer, "ColorToning", "SatProtectionThreshold");
            Write(writer, "ColorToning", "SaturatedOpacity");
            Write(writer, "ColorToning", "Strength");
            Write(writer, "ColorToning", "HighlightsColorSaturation");
            Write(writer, "ColorToning", "ShadowsColorSaturation");
            Write(writer, "ColorToning", "ClCurve");
            Write(writer, "ColorToning", "Cl2Curve");
            writer.WriteLine();
            writer.WriteLine("[RAW]");
            Write(writer, "RAW", "DarkFrame");
            Write(writer, "RAW", "DarkFrameAuto");
            Write(writer, "RAW", "FlatFieldFile");
            Write(writer, "RAW", "FlatFieldAutoSelect");
            Write(writer, "RAW", "FlatFieldBlurRadius");
            Write(writer, "RAW", "FlatFieldBlurType");
            Write(writer, "RAW", "FlatFieldAutoClipControl");
            Write(writer, "RAW", "FlatFieldClipControl");
            Write(writer, "RAW", "CA");
            Write(writer, "RAW", "CARed");
            Write(writer, "RAW", "CABlue");
            Write(writer, "RAW", "HotPixelFilter");
            Write(writer, "RAW", "DeadPixelFilter");
            Write(writer, "RAW", "HotDeadPixelThresh");
            Write(writer, "RAW", "PreExposure");
            Write(writer, "RAW", "PrePreserv");
            writer.WriteLine();
            writer.WriteLine("[RAW Bayer]");
            Write(writer, "RAWBayer", "Method");
            Write(writer, "RAWBayer", "CcSteps");
            Write(writer, "RAWBayer", "PreBlack0");
            Write(writer, "RAWBayer", "PreBlack1");
            Write(writer, "RAWBayer", "PreBlack2");
            Write(writer, "RAWBayer", "PreBlack3");
            Write(writer, "RAWBayer", "PreTwoGreen");
            Write(writer, "RAWBayer", "LineDenoise");
            Write(writer, "RAWBayer", "GreenEqThreshold");
            Write(writer, "RAWBayer", "DCBIterations");
            Write(writer, "RAWBayer", "DCBEnhance");
            Write(writer, "RAWBayer", "LMMSEIterations");
            writer.WriteLine();
            writer.WriteLine("[RAW X-Trans]");
            Write(writer, "RAWX-Trans", "Method");
            Write(writer, "RAWX-Trans", "CcSteps");
            Write(writer, "RAWX-Trans", "PreBlackRed");
            Write(writer, "RAWX-Trans", "PreBlackGreen");
            Write(writer, "RAWX-Trans", "PreBlackBlue");

        }

        private void Read326(string[] lines)
        {
            CultureInfo culture = new CultureInfo("en-US");
            List<string> Llines = lines.ToList();
            Llines.RemoveAll(t => String.IsNullOrWhiteSpace(t) || t.StartsWith("["));
            int i = 0;

            Add(new PP3entry("Version.AppVersion", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Version.Version", Convert.ToInt32(GetValue(Llines[i])), null, null)); FileVersion = (int)Values["Version.Version"].Value; i++;
            Add(new PP3entry("General.Rank", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("General.ColorLabel", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("General.InTrash", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Exposure.Auto", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Exposure.Clip", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 0.99d)); i++;
            Add(new PP3entry("Exposure.Compensation", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 0.99d)); Compensation = (double)Values["Exposure.Compensation"].Value; i++; 
            Add(new PP3entry("Exposure.Brightness", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Exposure.Contrast", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Exposure.Saturation", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Exposure.Black", Convert.ToInt32(GetValue(Llines[i])), -16384, 32768)); i++;
            Add(new PP3entry("Exposure.HighlightCompr", Convert.ToInt32(GetValue(Llines[i])), 0, 500)); i++;
            Add(new PP3entry("Exposure.HighlightComprThreshold", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Exposure.ShadowCompr", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Exposure.CurveMode", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Exposure.CurveMode2", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Exposure.Curve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Exposure.Curve2", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("HLRecovery.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("HLRecovery.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ChannelMixer.Red", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ChannelMixer.Green", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ChannelMixer.Blue", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.Auto", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.ComplementaryColors", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.Setting", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.Filter", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.MixerRed", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerOrange", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerYellow", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerGreen", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerCyan", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerBlue", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerMagenta", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.MixerPurple", Convert.ToInt32(GetValue(Llines[i])), -100, 200)); i++;
            Add(new PP3entry("BlackAndWhite.GammaRed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("BlackAndWhite.GammaGreen", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("BlackAndWhite.GammaBlue", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("BlackAndWhite.Algorithm", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.LuminanceCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.BeforeCurveMode", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.AfterCurveMode", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.BeforeCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("BlackAndWhite.AfterCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.Brightness", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("LuminanceCurve.Contrast", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("LuminanceCurve.Chromaticity", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("LuminanceCurve.AvoidColorShift", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.RedAndSkinTonesProtection", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 100d)); i++;
            Add(new PP3entry("LuminanceCurve.LCredsk", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.LCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.aCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.bCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.ccCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.chCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.lhCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.hhCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.LcCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LuminanceCurve.ClCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Sharpening.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Sharpening.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Sharpening.Radius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.3d, 3d)); i++;
            Add(new PP3entry("Sharpening.Amount", Convert.ToInt32(GetValue(Llines[i])), 1, 1000)); i++;
            Add(new PP3entry("Sharpening.Threshold", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Sharpening.OnlyEdges", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Sharpening.EdgedetectionRadius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.5d, 2.5d)); i++;
            Add(new PP3entry("Sharpening.EdgeTolerance", Convert.ToInt32(GetValue(Llines[i])), 10, 10000)); i++;
            Add(new PP3entry("Sharpening.HalocontrolEnabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Sharpening.HalocontrolAmount", Convert.ToInt32(GetValue(Llines[i])), 1, 100)); i++;
            Add(new PP3entry("Sharpening.DeconvRadius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.5d, 2.5d)); i++;
            Add(new PP3entry("Sharpening.DeconvAmount", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Sharpening.DeconvDamping", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Sharpening.DeconvIterations", Convert.ToInt32(GetValue(Llines[i])), 5, 100)); i++;
            Add(new PP3entry("Vibrance.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Vibrance.Pastels", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Vibrance.Saturated", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Vibrance.PSThreshold", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Vibrance.ProtectSkins", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Vibrance.AvoidColorShift", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Vibrance.PastSatTog", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Vibrance.SkinTonesCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("SharpenEdge.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("SharpenEdge.Passes", Convert.ToInt32(GetValue(Llines[i])), 1, 4)); i++;
            Add(new PP3entry("SharpenEdge.Strength", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("SharpenEdge.ThreeChannels", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("SharpenMicro.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("SharpenMicro.Matrix", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("SharpenMicro.Strength", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("SharpenMicro.Uniformity", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("WhiteBalance.Setting", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("WhiteBalance.Temperature", Convert.ToInt32(GetValue(Llines[i])), 1500, 60000)); i++;
            Add(new PP3entry("WhiteBalance.Green", Convert.ToDouble(GetValue(Llines[i]), culture), 0.02d, 5d)); i++;
            Add(new PP3entry("WhiteBalance.Equal", Convert.ToDouble(GetValue(Llines[i]), culture), 0.8d, 1.5d)); i++;
            Add(new PP3entry("Colorappearance.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Degree", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Colorappearance.AutoDegree", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Surround", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.AdaptLum", Convert.ToDouble(GetValue(Llines[i]), culture), 0.1d, 1000d)); i++;
            Add(new PP3entry("Colorappearance.Badpixsl", Convert.ToInt32(GetValue(Llines[i])), 0, 2)); i++;
            Add(new PP3entry("Colorappearance.Model", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.Algorithm", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.J-Light", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.Q-Bright", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.C-Chroma", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Colorappearance.S-Chroma", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.M-Chroma", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.J-Contrast", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.Q-Contrast", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.H-Hue", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Colorappearance.RSTProtection", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 100d)); i++;
            Add(new PP3entry("Colorappearance.AdaptScene", Convert.ToDouble(GetValue(Llines[i]), culture), 0.001d, 16384d)); i++;
            Add(new PP3entry("Colorappearance.AutoAdapscen", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.SurrSource", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Gamut", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Datacie", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Tonecie", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.CurveMode", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.CurveMode2", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.CurveMode3", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Colorappearance.Curve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Curve2", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Colorappearance.Curve3", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ImpulseDenoising.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ImpulseDenoising.Threshold", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Defringing.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Defringing.Radius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.5d, 5d)); i++;
            Add(new PP3entry("Defringing.Threshold", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Defringing.HueCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Enhance", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Median", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Auto", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Luma", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 100d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Ldetail", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 100d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Chroma", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 100d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.LMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.CMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.C2Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.SMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.MedMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.RGBMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.MethodMed", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Redchro", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Bluechro", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Gamma", Convert.ToDouble(GetValue(Llines[i]), culture), 1d, 3d)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.Passes", Convert.ToInt32(GetValue(Llines[i])), 1, 3)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.LCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidDenoising.CCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("EPD.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("EPD.Strength", Convert.ToDouble(GetValue(Llines[i]), culture), -2d, 2d)); i++;
            Add(new PP3entry("EPD.Gamma", Convert.ToDouble(GetValue(Llines[i]), culture), 1d, 3d)); i++;
            Add(new PP3entry("EPD.EdgeStopping", Convert.ToDouble(GetValue(Llines[i]), culture), 0.1d, 4d)); i++;
            Add(new PP3entry("EPD.Scale", Convert.ToDouble(GetValue(Llines[i]), culture), 0.1d, 10d)); i++;
            Add(new PP3entry("EPD.ReweightingIterates", Convert.ToInt32(GetValue(Llines[i])), 0, 9)); i++;
            Add(new PP3entry("ShadowsAndHighlights.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ShadowsAndHighlights.HighQuality", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ShadowsAndHighlights.Highlights", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("ShadowsAndHighlights.HighlightTonalWidth", Convert.ToInt32(GetValue(Llines[i])), 10, 100)); i++;
            Add(new PP3entry("ShadowsAndHighlights.Shadows", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("ShadowsAndHighlights.ShadowTonalWidth", Convert.ToInt32(GetValue(Llines[i])), 10, 100)); i++;
            Add(new PP3entry("ShadowsAndHighlights.LocalContrast", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("ShadowsAndHighlights.Radius", Convert.ToInt32(GetValue(Llines[i])), 5, 100)); i++;
            Add(new PP3entry("Crop.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.X", Convert.ToInt32(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.Y", Convert.ToInt32(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.W", Convert.ToInt32(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.H", Convert.ToInt32(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.FixedRatio", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Crop.Ratio", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Crop.Orientation", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Crop.Guide", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("CoarseTransformation.Rotate", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("CoarseTransformation.HorizontalFlip", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("CoarseTransformation.VerticalFlip", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("CommonPropertiesforTransformations.AutoFill", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Rotation.Degree", Convert.ToDouble(GetValue(Llines[i]), culture), -45d, 45d)); i++;
            Add(new PP3entry("Distortion.Amount", Convert.ToDouble(GetValue(Llines[i]), culture), -0.5d, 0.5d)); i++;
            Add(new PP3entry("LensProfile.LCPFile", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("LensProfile.UseDistortion", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LensProfile.UseVignette", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("LensProfile.UseCA", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Perspective.Horizontal", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Perspective.Vertical", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Gradient.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Gradient.Degree", Convert.ToInt32(GetValue(Llines[i])), -180, 180)); i++;
            Add(new PP3entry("Gradient.Feather", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Gradient.Strength", Convert.ToDouble(GetValue(Llines[i]), culture), -5d, 5d)); i++;
            Add(new PP3entry("Gradient.CenterX", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Gradient.CenterY", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("PCVignette.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("PCVignette.Strength", Convert.ToDouble(GetValue(Llines[i]), culture), -6d, 6d)); i++;
            Add(new PP3entry("PCVignette.Feather", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("PCVignette.Roundness", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("CACorrection.Red", Convert.ToDouble(GetValue(Llines[i]), culture), -0.005d, 0.005d)); i++;
            Add(new PP3entry("CACorrection.Blue", Convert.ToDouble(GetValue(Llines[i]), culture), -0.005d, 0.005d)); i++;
            Add(new PP3entry("VignettingCorrection.Amount", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("VignettingCorrection.Radius", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("VignettingCorrection.Strength", Convert.ToInt32(GetValue(Llines[i])), 1, 100)); i++;
            Add(new PP3entry("VignettingCorrection.CenterX", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("VignettingCorrection.CenterY", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Resize.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Resize.Scale", Convert.ToDouble(GetValue(Llines[i]), culture), 0.23d, 0.23d)); i++;
            Add(new PP3entry("Resize.AppliesTo", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Resize.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Resize.DataSpecified", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("Resize.Width", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("Resize.Height", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;

            Add(new PP3entry("PostResizeSharpening.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("PostResizeSharpening.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("PostResizeSharpening.Radius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.3d, 3d)); i++;
            Add(new PP3entry("PostResizeSharpening.Amount", Convert.ToInt32(GetValue(Llines[i])), 1, 1000)); i++;
            Add(new PP3entry("PostResizeSharpening.Threshold", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("PostResizeSharpening.OnlyEdges", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("PostResizeSharpening.EdgedetectionRadius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.5d, 2.5d)); i++;
            Add(new PP3entry("PostResizeSharpening.EdgeTolerance", Convert.ToInt32(GetValue(Llines[i])), 10, 10000)); i++;
            Add(new PP3entry("PostResizeSharpening.HalocontrolEnabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("PostResizeSharpening.HalocontrolAmount", Convert.ToInt32(GetValue(Llines[i])), 1, 100)); i++;
            Add(new PP3entry("PostResizeSharpening.DeconvRadius", Convert.ToDouble(GetValue(Llines[i]), culture), 0.5d, 2.5d)); i++;
            Add(new PP3entry("PostResizeSharpening.DeconvAmount", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("PostResizeSharpening.DeconvDamping", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("PostResizeSharpening.DeconvIterations", Convert.ToInt32(GetValue(Llines[i])), 5, 100)); i++;

            Add(new PP3entry("ColorManagement.InputProfile", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorManagement.ToneCurve", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.ApplyLookTable", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.ApplyBaselineExposureOffset", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.ApplyHueSatMap", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.BlendCMSMatrix", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.DCPIlluminant", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("ColorManagement.WorkingProfile", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorManagement.OutputProfile", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorManagement.Gammafree", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorManagement.Freegamma", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorManagement.GammaValue", Convert.ToDouble(GetValue(Llines[i]), culture), 1d, 3.5d)); i++;
            Add(new PP3entry("ColorManagement.GammaSlope", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 15d)); i++;

            Add(new PP3entry("Wavelet.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Strength", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Balance", Convert.ToInt32(GetValue(Llines[i])), -30, 100)); i++;
            Add(new PP3entry("Wavelet.Iter", Convert.ToInt32(GetValue(Llines[i])), -3, 3)); i++;
            Add(new PP3entry("Wavelet.MaxLev", Convert.ToInt32(GetValue(Llines[i])), 4, 9)); i++;
            Add(new PP3entry("Wavelet.TilesMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.DaubMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.ChoiceLevMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.BackMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.LevMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.DirMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.CBgreenhigh", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.CBgreenmed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.CBgreenlow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.CBbluehigh", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.CBbluemed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.CBbluelow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Expcontrast", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Expchroma", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Expedge", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Expresid", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Expfinal", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Exptoning", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Expnoise", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Contrast1", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast2", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast3", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast4", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast5", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast6", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast7", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast8", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Contrast9", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma1", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma2", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma3", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma4", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma5", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma6", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma7", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma8", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.Chroma9", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.ContExtra", Convert.ToInt32(GetValue(Llines[i])), -100, 350)); i++;
            Add(new PP3entry("Wavelet.HSMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.HLRange", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.SHRange", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Edgcont", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Level0noise", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Level1noise", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Level2noise", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Level3noise", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.ThresholdHighlight", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.ThresholdShadow", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Edgedetect", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Edgedetectthr", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.EdgedetectthrHi", Convert.ToInt32(GetValue(Llines[i])), -10, 100)); i++;
            Add(new PP3entry("Wavelet.Edgesensi", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Edgeampli", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.ThresholdChroma", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.CHromaMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.Medgreinf", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.CHSLromaMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.EDMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.NPMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.BAMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.TMMethod", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("Wavelet.ChromaLink", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.ContrastCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Pastlev", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Satlev", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.OpacityCurveRG", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.OpacityCurveBY", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.OpacityCurveW", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.OpacityCurveWL", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.HHcurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.CHcurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.WavclCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Median", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Medianlev", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Linkedg", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.CBenab", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Lipst", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Skinprotect", Convert.ToDouble(GetValue(Llines[i]), culture), 1d, 3.5d)); i++;
            Add(new PP3entry("Wavelet.Hueskin", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Edgrad", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Edgval", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.ThrEdg", Convert.ToInt32(GetValue(Llines[i])), -50, 100)); i++;
            Add(new PP3entry("Wavelet.AvoidColorShift", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.TMr", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.ResidualcontShadow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.ResidualcontHighlight", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.ThresholdResidShadow", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.ThresholdResidHighLight", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("Wavelet.Residualchroma", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("Wavelet.ResidualTM", Convert.ToDouble(GetValue(Llines[i]), culture), -1.0d, 2.0d)); i++;
            Add(new PP3entry("Wavelet.Residualgamma", Convert.ToDouble(GetValue(Llines[i]), culture), 0.4d, 2.0d)); i++;
            Add(new PP3entry("Wavelet.HueRangeResidual", Convert.ToDouble(GetValue(Llines[i]), culture), -100d, 100d)); i++;
            Add(new PP3entry("Wavelet.HueRange", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("Wavelet.Contrast", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;

            Add(new PP3entry("DirectionalPyramidEqualizer.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Gamutlab", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult0", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult1", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult2", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult3", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult4", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Mult5", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 4d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Threshold", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 1d)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Skinprotect", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("DirectionalPyramidEqualizer.Hueskin", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("HSVEqualizer.HCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("HSVEqualizer.SCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("HSVEqualizer.VCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("FilmSimulation.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("FilmSimulation.ClutFilename", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("FilmSimulation.Strength", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("RGBCurves.LumaMode", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RGBCurves.rCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RGBCurves.gCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RGBCurves.bCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.Enabled", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorToning.Lumamode", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.Twocolor", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorToning.Redlow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Greenlow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Bluelow", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Satlow", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("ColorToning.Balance", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Sathigh", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("ColorToning.Redmed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Greenmed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Bluemed", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Redhigh", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Greenhigh", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Bluehigh", Convert.ToInt32(GetValue(Llines[i])), -100, 100)); i++;
            Add(new PP3entry("ColorToning.Autosat", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.OpacityCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.ColorCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.SatProtectionThreshold", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("ColorToning.SaturatedOpacity", Convert.ToInt32(GetValue(Llines[i])), 0, 0)); i++;
            Add(new PP3entry("ColorToning.Strength", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("ColorToning.HighlightsColorSaturation", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.ShadowsColorSaturation", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            //TODO: Correct the GetCurve function 
            //Add(new PP3entry("ColorToning.ClCurve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            //Add(new PP3entry("ColorToning.Cl2Curve", PP3Curve.GetCurve(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("ColorToning.ClCurve", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("ColorToning.Cl2Curve", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAW.DarkFrame", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAW.DarkFrameAuto", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.FlatFieldFile", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAW.FlatFieldAutoSelect", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.FlatFieldBlurRadius", Convert.ToInt32(GetValue(Llines[i])), 0, 200)); i++;
            Add(new PP3entry("RAW.FlatFieldBlurType", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAW.FlatFieldAutoClipControl", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.FlatFieldClipControl", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.CA", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.CARed", Convert.ToDouble(GetValue(Llines[i]), culture), -4d, 4d)); i++;
            Add(new PP3entry("RAW.CABlue", Convert.ToDouble(GetValue(Llines[i]), culture), -4d, 4d)); i++;
            Add(new PP3entry("RAW.HotPixelFilter", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.DeadPixelFilter", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAW.HotDeadPixelThresh", Convert.ToInt32(GetValue(Llines[i])), 40, 40)); i++;
            Add(new PP3entry("RAW.PreExposure", Convert.ToDouble(GetValue(Llines[i]), culture), 0.1d, 16d)); i++;
            Add(new PP3entry("RAW.PrePreserv", Convert.ToDouble(GetValue(Llines[i]), culture), 0d, 2.5d)); i++;
            Add(new PP3entry("RAWBayer.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAWBayer.CcSteps", Convert.ToInt32(GetValue(Llines[i])), 0, 5)); i++;
            Add(new PP3entry("RAWBayer.PreBlack0", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWBayer.PreBlack1", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWBayer.PreBlack2", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWBayer.PreBlack3", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWBayer.PreTwoGreen", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAWBayer.LineDenoise", Convert.ToInt32(GetValue(Llines[i])), 0, 1000)); i++;
            Add(new PP3entry("RAWBayer.GreenEqThreshold", Convert.ToInt32(GetValue(Llines[i])), 0, 100)); i++;
            Add(new PP3entry("RAWBayer.DCBIterations", Convert.ToInt32(GetValue(Llines[i])), 0, 5)); i++;
            Add(new PP3entry("RAWBayer.DCBEnhance", Convert.ToBoolean(GetValue(Llines[i])), null, null)); i++;
            Add(new PP3entry("RAWBayer.LMMSEIterations", Convert.ToInt32(GetValue(Llines[i])), 0, 6)); i++;
            Add(new PP3entry("RAWX-Trans.Method", GetValue(Llines[i]), null, null)); i++;
            Add(new PP3entry("RAWX-Trans.CcSteps", Convert.ToInt32(GetValue(Llines[i])), 0, 5)); i++;
            Add(new PP3entry("RAWX-Trans.PreBlackRed", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWX-Trans.PreBlackGreen", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;
            Add(new PP3entry("RAWX-Trans.PreBlackBlue", Convert.ToDouble(GetValue(Llines[i]), culture), -2048d, 2048d)); i++;

            NewCompensation = Compensation;
        }
    }
}
